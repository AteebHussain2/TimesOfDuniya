// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["accelerate"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  username  String  @unique
  fullname  String
  firstName String
  lastName  String?
  email     String  @unique
  role      Role    @default(MEMBER)
  imageUrl  String?

  posts       Post[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Comment     Comment[]
  Like        Like[]
  View        View[]
  CommentLike CommentLike[]
}

enum Role {
  ADMIN
  EDITOR
  MODERATOR
  MEMBER
}

model Post {
  id        Int      @id @default(autoincrement())
  thumbnail String
  title     String
  slug      String
  summary   String?
  content   String
  source    Source[]

  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  accuracy      Int?          @default(0)
  reason        String?
  feedback      String?
  articleStatus ARTICLESTATUS @default(PENDING)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  tags     Tag[]     @relation("PostTags")
  labels   String[]
  comments Comment[]
  likes    Like[]
  views    View[]
}

model Source {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  slug        String  @unique
  description String?
  posts       Post[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Job       Job[]
  Topic     Topic[]
  Article   Article[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  likes CommentLike[]
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())

  @@unique([commentId, userId]) // Each user can like a comment only once
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // Prevent multiple likes from same user
}

model View {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Optional user (null for guest/anonymous)
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional metadata
  ipAddress String?
  userAgent String?

  // Prevent duplicate views per user/post (optional)
  @@unique([postId, userId])
  @@unique([postId, ipAddress])
}

model Job {
  userId         String?
  id             Int      @id @default(autoincrement())
  category       Category @relation(fields: [categoryId], references: [id])
  categoryId     Int
  type           TYPE
  trigger        TRIGGER  @default(CRON)
  status         STATUS   @default(QUEUED)
  totalItems     Int      @default(0)
  completedItems Int      @default(0)
  error          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  topics      Topic[]
  articles    Article[]
  UsageMetric UsageMetric[]
}

model Topic {
  id         Int      @id @default(autoincrement())
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  title      String
  summary    String?
  source     String[]
  published  String?
  status     STATUS   @default(PENDING)
  createdAt  DateTime @default(now())

  articles Article[]
}

model Article {
  id           Int       @id @default(autoincrement())
  thumbnail    String?
  title        String
  summary      String?
  content      String
  tags         String[]
  source       String[]
  publishedAt  DateTime?
  publishedUrl String?

  accuracy      Int?          @default(0)
  reasoning     String?
  feedback      String?
  articleStatus ARTICLESTATUS @default(PENDING)

  topicId Int
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  jobId Int
  job   Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  status    STATUS   @default(PENDING)
  createdAt DateTime @default(now())
}

enum ARTICLESTATUS {
  PENDING
  APPROVED
  REJECTED
}

enum TYPE {
  TOPIC_GENERATION
  ARTICLE_GENERATION
}

enum TRIGGER {
  MANUAL
  CRON
}

enum STATUS {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  QUEUED
}

model UsageMetric {
  id                 Int      @id @default(autoincrement())
  userId             String?
  date               DateTime
  promptTokens       Int
  completionTokens   Int
  totalTokens        Int
  successfulRequests Int
  trigger            TRIGGER  @default(CRON)

  jobId Int? // Optional relation to Job
  job   Job? @relation(fields: [jobId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
}
